// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3244.SuperSirAntsABot2.subsystems;

import org.usfirst.frc3244.SuperSirAntsABot2.Constants;
import org.usfirst.frc3244.SuperSirAntsABot2.Robot;
import org.usfirst.frc3244.SuperSirAntsABot2.RobotMap;
import org.usfirst.frc3244.SuperSirAntsABot2.commands.*;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import com.ctre.phoenix.ParamEnum;
import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
import com.ctre.phoenix.motorcontrol.NeutralMode;
import com.ctre.phoenix.motorcontrol.StatusFrameEnhanced;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Scissor extends Subsystem {
	private boolean m_DebugThisSubsystem = true;

	public static final double CLIMB_FINNISED = 50;//55
	public static final double CLIMB_START = 82;
	public static final double SCALE = 82;
	public static final double SWITCH = 40;
	public static final double DOWN = 13.5;
	public static final double DRIVE_WITH_CUBE = 16;
	
	private double m_encoderUnitsPerRev = 4096;
	private double m_convertion = 1029.93; //1029.93 (5/8 screw) working //1273.87 (1/2 screw)
  	  	
  	private double m_targetEncoderValue = 0;
	private static final double m_maxHeight = 85;
	private static final double m_minHeight = 0.0;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final WPI_TalonSRX motor_Right = RobotMap.scissorMotor_Right;
    private final WPI_TalonSRX motor_Left = RobotMap.scissorMotor_Left;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // member variables for Motors drive
  	private static final int kMaxNumberOfMotors = 2;
  	private final int m_invertedMotors[] = new int[kMaxNumberOfMotors];
  	private static final int kMotorLeft = 0;
  	private static final int kMotorRight = 1;
  	
  	// create objects needed for independent control of each wheel
  	private WPI_TalonSRX[] m_talons = new WPI_TalonSRX[kMaxNumberOfMotors];
  	private double m_zeroPositions[] = new double[kMaxNumberOfMotors];
  	
 // member variables to support closed loop mode
  	private boolean m_closedLoopMode = true;
  	private int m_CruiseVelocity = 2600; //2444 = 75% //Test at 600  //2600 = 80%, 2770 = 85%, 3620 = 90%
	private int m_Acceleration = 1500;//1500; //Test at 600
	private int m_CruiseVelocityClimb = 600;
	private int m_AccelerationClimb = 600;
	private double m_motorLeft_Profile_Start_Pos = 0;
	private double m_motorRight_Profile_Start_Pos = 0;
	private double m_Tolerance = .2; //+- .5 inch
	
	//Status variables
	public boolean m_Left_FWD_LimitSwitch = false;
	public boolean m_Left_REV_LimitSwitch = false;
	public boolean m_Right_FWD_LimitSwitch = false;
	public boolean m_Right_REV_LimitSwitch = false;
	
    public Scissor() {
    	int talonIndex = 0;

    	// construct the talons
    	m_talons[kMotorLeft] = motor_Left;
    	m_talons[kMotorRight] = motor_Right;
    	
    	/* first choose the sensor */
    	for (talonIndex = 0; talonIndex < kMaxNumberOfMotors; talonIndex++) {
    		m_talons[talonIndex].configSelectedFeedbackSensor(FeedbackDevice.CTRE_MagEncoder_Relative, Constants.kPIDLoopIdx, Constants.kTimeoutMs);
    		m_talons[talonIndex].setSensorPhase(false);
    		m_talons[talonIndex].setInverted(false);
    	}
		
		/* Set relevant frame periods to be at least as fast as periodic rate*/
    	for (talonIndex = 0; talonIndex < kMaxNumberOfMotors; talonIndex++) {
    		m_talons[talonIndex].setStatusFramePeriod(StatusFrameEnhanced.Status_13_Base_PIDF0, 10, Constants.kTimeoutMs);
    		m_talons[talonIndex].setStatusFramePeriod(StatusFrameEnhanced.Status_10_MotionMagic, 10, Constants.kTimeoutMs);
    	}

		/* set the peak and nominal outputs, 12V means full */
    	for (talonIndex = 0; talonIndex < kMaxNumberOfMotors; talonIndex++) {
    		m_talons[talonIndex].configNominalOutputForward(0, Constants.kTimeoutMs);
    		m_talons[talonIndex].configNominalOutputReverse(0, Constants.kTimeoutMs);
    		m_talons[talonIndex].configPeakOutputForward(1, Constants.kTimeoutMs);
    		m_talons[talonIndex].configPeakOutputReverse(-1, Constants.kTimeoutMs);
    	}
    	
		/* set acceleration and vcruise velocity - see documentation */
		for (talonIndex = 0; talonIndex < kMaxNumberOfMotors; talonIndex++) {
			m_talons[talonIndex].configMotionCruiseVelocity(m_CruiseVelocity, Constants.kTimeoutMs);
			m_talons[talonIndex].configMotionAcceleration(m_Acceleration, Constants.kTimeoutMs);
		}
		/* zero the sensor */
		for (talonIndex = 0; talonIndex < kMaxNumberOfMotors; talonIndex++) {
			m_talons[talonIndex].setSelectedSensorPosition(0, Constants.kPIDLoopIdx, Constants.kTimeoutMs);
		}
			
		//Configure Talon to clear sensor position on Reverse Limit
		for (talonIndex = 0; talonIndex < kMaxNumberOfMotors; talonIndex++) {
			m_talons[talonIndex].configSetParameter(ParamEnum.eClearPositionOnLimitF, 0, 0, 0, 10);
			m_talons[talonIndex].configSetParameter(ParamEnum.eClearPositionOnLimitR, 1, 0, 0, 10);
		}
		
		/* Set The PID Profile Slot */
		for (talonIndex = 0; talonIndex < kMaxNumberOfMotors; talonIndex++) {
			m_talons[talonIndex].selectProfileSlot(0, 0);
		}
	
    }
    
    
    public void init() {
		// complete initialization here that can't be performed in constructor
		// (some calls can't be made in constructor because other objects don't
		// yet exist)

		// Set up the TalonSRX closed loop / open loop mode for each wheel
    	
    	setPIDF();
    	setClimbPIDF();
	}
    
    public void setClimbPIDF() {
 		int talonIndex = 0;
 		double scissorkP = 0.2;///RobotPreferences.getScissorkP();
		double scissorkI = 0.0;//RobotPreferences.getScissorkI();
		double scissorkD = 0.0;//RobotPreferences.getScissorkD();
		double scissorkF = 0.314;//RobotPreferences.getScissorkF();
		
    	/* set closed loop gains in slot0 */
    	for (talonIndex = 0; talonIndex < kMaxNumberOfMotors; talonIndex++) {
    		m_talons[talonIndex].config_kF(1, scissorkF, Constants.kTimeoutMs);
    		m_talons[talonIndex].config_kP(1, scissorkP, Constants.kTimeoutMs);
    		m_talons[talonIndex].config_kI(1, scissorkI, Constants.kTimeoutMs);
    		m_talons[talonIndex].config_kD(1, scissorkD, Constants.kTimeoutMs);
    		m_talons[talonIndex].setNeutralMode(NeutralMode.Coast);
    	}
    	
 	}

    public void setPIDF() {
    	int talonIndex = 0;
		double scissorkP = 0.2;///RobotPreferences.getScissorkP();
		double scissorkI = 0.0;//RobotPreferences.getScissorkI();
		double scissorkD = 0.0;//RobotPreferences.getScissorkD();
		double scissorkF = 0.314;//RobotPreferences.getScissorkF();
		
    	/* set closed loop gains in slot0 */
    	for (talonIndex = 0; talonIndex < kMaxNumberOfMotors; talonIndex++) {
    		m_talons[talonIndex].config_kF(Constants.kPIDLoopIdx, scissorkF, Constants.kTimeoutMs);
    		m_talons[talonIndex].config_kP(Constants.kPIDLoopIdx, scissorkP, Constants.kTimeoutMs);
    		m_talons[talonIndex].config_kI(Constants.kPIDLoopIdx, scissorkI, Constants.kTimeoutMs);
    		m_talons[talonIndex].config_kD(Constants.kPIDLoopIdx, scissorkD, Constants.kTimeoutMs);
    		m_talons[talonIndex].setNeutralMode(NeutralMode.Coast);
    	}
    }
    
	
    
    @Override
    public void initDefaultCommand() {
        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
       
    	m_Left_FWD_LimitSwitch = my_get_LEFT_FWD_LimitSwitch();
    	m_Left_REV_LimitSwitch = my_get_LEFT_REV_LimitSwitch();
    	m_Right_FWD_LimitSwitch = my_get_RIGHT_FWD_LimitSwitch();
    	m_Right_REV_LimitSwitch = my_get_RIGHT_REV_LimitSwitch();
    	
    	diagnostics();
    	
    	if(m_DebugThisSubsystem) {
    		debug();
    	}
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void my_ScissorSetpositionToCurrent() {
    	m_targetEncoderValue = (my_get_LEFT_Raw_Encoder() + my_get_RIGHT_Raw_Encoder()) / 2;
    	m_talons[kMotorRight].set(ControlMode.MotionMagic, my_get_RIGHT_Raw_Encoder());
    	m_talons[kMotorLeft].set(ControlMode.MotionMagic, my_get_LEFT_Raw_Encoder());
    }
    
    //Set the start positions for a motion magic move
    public void my_set_MotoinMagic_Start_Memory() {
    	m_motorLeft_Profile_Start_Pos = my_get_LEFT_Raw_Encoder();
    	m_motorRight_Profile_Start_Pos = my_get_RIGHT_Raw_Encoder();
    }
    
    //Set the PID Profile Slot
    /**
     * 
     * @param isClimb
     */
    public void my_set_ControlProfile(boolean isClimb) {
    	int talonIndex;
    	
    	if(isClimb) {
    		for (talonIndex = 0; talonIndex < kMaxNumberOfMotors; talonIndex++) {
    			m_talons[talonIndex].selectProfileSlot(1, 0);
    		}
    		for (talonIndex = 0; talonIndex < kMaxNumberOfMotors; talonIndex++) {
    			m_talons[talonIndex].configMotionCruiseVelocity(m_CruiseVelocityClimb, Constants.kTimeoutMs);
    			m_talons[talonIndex].configMotionAcceleration(m_AccelerationClimb, Constants.kTimeoutMs);
    		}
    	}else {
    		for (talonIndex = 0; talonIndex < kMaxNumberOfMotors; talonIndex++) {
    			m_talons[talonIndex].selectProfileSlot(0, 0);
    		}
    		for (talonIndex = 0; talonIndex < kMaxNumberOfMotors; talonIndex++) {
    			m_talons[talonIndex].configMotionCruiseVelocity(m_CruiseVelocity, Constants.kTimeoutMs);
    			m_talons[talonIndex].configMotionAcceleration(m_Acceleration, Constants.kTimeoutMs);
    		}
    	}
    }
        
    
    public void my_ScissorMotionMagic(double height) {
    	m_targetEncoderValue = clampEncoderValue((height-DOWN) * m_convertion);
    	
		// Motion Magic Sync
		double encoder_Left = my_get_LEFT_Raw_Encoder();
		double encoder_Right = my_get_RIGHT_Raw_Encoder();
		double syncError = encoder_Left - encoder_Right;
		SmartDashboard.putNumber("Motion Magic Sync Error", syncError);

    	m_talons[kMotorRight].set(ControlMode.MotionMagic, m_targetEncoderValue);
    	m_talons[kMotorLeft].set(ControlMode.MotionMagic, m_targetEncoderValue);
    }
    
    private double clampEncoderValue(double value) {
    	double rotatinToEncoder_Limit = 21.5*4096; // 18*4096 for 5/8 lead Screw,, 21.5*4096 for 1/2 lead Screw
    	if(value > rotatinToEncoder_Limit) { //18 Rev at 4096 counts/rev
    		DriverStation.reportError("Scissor m_targetEncoderValue. Out of range MAX: " + value  + ">" + rotatinToEncoder_Limit, false);
    		return rotatinToEncoder_Limit
    				;
    	}else if(value<0){
    		DriverStation.reportError("Scissor m_targetEncoderValue. Out of range MIN: " + value  + "<" + 0, false);
    		return 0;
    	}else {
    		
    		return value;
    	}
    }
    
    public void my_jog_Left_Down_Motor() {
    	m_talons[kMotorLeft].set(ControlMode.PercentOutput, -0.1);
    }
    public void my_Jog_Right_Down_Motor() {
    	m_talons[kMotorRight].set(ControlMode.PercentOutput, -0.1);
    }
    
    public void my_ScissorStop() {
    	m_talons[kMotorLeft].set(ControlMode.PercentOutput, 0.0);
    	m_talons[kMotorRight].set(ControlMode.PercentOutput, 0.0);
    }
   
    //************ Get Encoders ************
    public double my_get_LEFT_Raw_Encoder() {
    	return m_talons[kMotorLeft].getSelectedSensorPosition(0);
    }
    public double my_get_RIGHT_Raw_Encoder() {
    	return m_talons[kMotorRight].getSelectedSensorPosition(0);
    }
    
    public double my_get_Current_Height() {
    	return ((my_get_LEFT_Raw_Encoder() + my_get_RIGHT_Raw_Encoder()) / 2) / m_convertion;
    }
    
    //************ Get Limit Switches
    public boolean my_get_LEFT_FWD_LimitSwitch() {
    	return m_talons[kMotorLeft].getSensorCollection().isFwdLimitSwitchClosed();
    }
    public boolean my_get_LEFT_REV_LimitSwitch() {
    	return m_talons[kMotorLeft].getSensorCollection().isRevLimitSwitchClosed();
    }
    public boolean my_get_RIGHT_FWD_LimitSwitch() {
    	return m_talons[kMotorRight].getSensorCollection().isFwdLimitSwitchClosed();
    }
    public boolean my_get_RIGHT_REV_LimitSwitch() {
    	return m_talons[kMotorRight].getSensorCollection().isRevLimitSwitchClosed();
    }
    
    public void my_zeroEncoders() {
    	int talonIndex = 0;
    	/* zero the sensor */
		for (talonIndex = 0; talonIndex < kMaxNumberOfMotors; talonIndex++) {
			m_talons[talonIndex].setSelectedSensorPosition(0, Constants.kPIDLoopIdx, Constants.kTimeoutMs);
		}
    }
    
    public void my_referenc_Encoders_to_LimitSwitch() {
    	int homeDir = -1;
    	double homeSpeed = .1;
    	double syncError;
    	
    	if(Robot.oi.launchPad.getRawButton(11)){
    		homeSpeed = .7;
    	}else {
    		homeSpeed = .3;
    	}
    	
    	syncError = my_get_LEFT_Raw_Encoder() - my_get_RIGHT_Raw_Encoder();
    	System.out.println("syncError= " + syncError);
   
    	if(!m_Left_REV_LimitSwitch) {
    		m_talons[kMotorLeft].set(ControlMode.PercentOutput, (homeSpeed)*homeDir);
    	}else {
    		m_talons[kMotorLeft].set(ControlMode.PercentOutput,0.0);
    	}
    	
    	if(!m_Right_REV_LimitSwitch) {
    		m_talons[kMotorRight].set(ControlMode.PercentOutput, (homeSpeed)*homeDir);
    	}else {
    		m_talons[kMotorRight].set(ControlMode.PercentOutput,0.0);
    	}
    }
    
    public void my_reference_Encoders_off_LimitSwitch() {
    		m_talons[kMotorLeft].set(ControlMode.MotionMagic, 1024);
    		m_talons[kMotorRight].set(ControlMode.MotionMagic, 1024);
    }
    
    public boolean onTarget() {
    	double window_Hi = m_targetEncoderValue + (m_Tolerance*m_encoderUnitsPerRev);
    	double window_Low = m_targetEncoderValue - (m_Tolerance*m_encoderUnitsPerRev);
    	double currentPos = (my_get_LEFT_Raw_Encoder()+my_get_RIGHT_Raw_Encoder())/2;
    	
    	if(currentPos > window_Low && currentPos < window_Hi) {
    		return true;
    	}else {
    		return false;
    	}	
    }
    
    public boolean getOvertraveles() {
    	if(m_Left_FWD_LimitSwitch || m_Left_REV_LimitSwitch || m_Right_FWD_LimitSwitch || m_Right_REV_LimitSwitch) {
    		return true;
    	}else {
    		return false;
    	}
    }
    
    boolean report_ONS[] = new boolean[4];
    
    public void diagnostics() {
    	
    	
    	if(m_Left_FWD_LimitSwitch) {
    		if(!report_ONS[0]) {
    			DriverStation.reportError("Scissor Left FWD Limit Switch activated ", false);
    			report_ONS[0] = true;
    		}
    	}else {
    		report_ONS[0] = false;
    	}
    	
    	if(m_Left_REV_LimitSwitch) {
    		if(!report_ONS[1]) {
    			DriverStation.reportError("Scissor Left REV Limit Switch activated ", false);
    			report_ONS[1] = true;
    		}
    	}else {
    		report_ONS[1] = false;
    	}
    	
    	if(m_Right_FWD_LimitSwitch) {
    		if(!report_ONS[2]) {
    			DriverStation.reportError("Scissor Right FWD Limit Switch activated ", false);
    			report_ONS[2] = true;
    		}
    	}else {
    		report_ONS[2] = false;
    	}
    	
    	if(m_Right_REV_LimitSwitch) {
    		if(!report_ONS[3]) {
    			DriverStation.reportError("Scissor Right REV Limit Switch activated ", false);
    			report_ONS[3] = true;
    		}
    	}else {
    		report_ONS[3] = false;
    	}
    }
    
    private void debug() {
    	SmartDashboard.putNumber("TargetPos", 			m_targetEncoderValue);
    	SmartDashboard.putNumber("AccPos kMotorLeft", 	my_get_LEFT_Raw_Encoder());
    	SmartDashboard.putNumber("AccPos kMotorRight", 	my_get_RIGHT_Raw_Encoder());
    	
    	double rawEncioder_window_Hi 	= 		m_targetEncoderValue 		+ 	(m_Tolerance*m_encoderUnitsPerRev);
    	double rawEncioder_window_Low 	= 		m_targetEncoderValue 		- 	(m_Tolerance*m_encoderUnitsPerRev);
    	double currentRawEncoderPos 	= 		(my_get_LEFT_Raw_Encoder() 	+ 	my_get_RIGHT_Raw_Encoder()) / 2;
    	
    	SmartDashboard.putNumber("Current Pos: ", 	currentRawEncoderPos / (m_convertion));
    	SmartDashboard.putNumber("Window Hi", 		rawEncioder_window_Hi / (m_convertion));
    	SmartDashboard.putNumber("window Low", 		rawEncioder_window_Low / (m_convertion));
    	
    	SmartDashboard.putString("Motor Left ControlMode", 		m_talons[kMotorLeft].getControlMode().toString());
    	SmartDashboard.putString("Motor Right ControlMode", 	m_talons[kMotorRight].getControlMode().toString());
    }

}

